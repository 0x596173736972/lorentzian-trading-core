[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lorentzian-trading-core"
description = "A quantum-inspired machine learning library for financial trading using Lorentzian distance"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Yassir DANGOU", email = "dangouyassir3@gmail.com"},
]
maintainers = [
    {name = "Yassir DANGOU", email = "dangouyassir3@gmail.com"},
]
keywords = [
    "trading",
    "machine-learning", 
    "finance",
    "quantitative",
    "lorentzian",
    "distance",
    "classification",
    "technical-analysis",
    "backtesting",
    "algorithmic-trading"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0,<2.0.0",
    "pandas>=1.3.0,<3.0.0",
    "scipy>=1.7.0,<2.0.0",
    "scikit-learn>=1.0.0,<2.0.0",
    "TA-Lib>=0.4.21",
    "python-dateutil>=2.8.0",
    "tqdm>=4.62.0",
    "typing-extensions>=4.0.0;python_version<'3.10'",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/0x596173736972/lorentzian-trading-core"
Repository = "https://github.com/0x596173736972/lorentzian-trading-core.git"
"Bug Tracker" = "https://github.com/0x596173736972/lorentzian-trading-core/issues"

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.0",
    "flake8-bugbear>=23.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "coverage[toml]>=7.0.0",
]

# Documentation dependencies
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=1.0.0",
    "nbsphinx>=0.9.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

# Plotting and visualization
plotting = [
    "plotly>=5.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "kaleido>=0.2.1",  # For plotly static image export
]

# Data acquisition
data = [
    "yfinance>=0.2.0",
    "alpha-vantage>=2.3.0",
    "quandl>=3.7.0",
    "pandas-datareader>=0.10.0",
    "ccxt>=4.0.0",  # Cryptocurrency exchange data
]

# High-performance computing
performance = [
    "numba>=0.57.0",
    "bottleneck>=1.3.0",
    "numexpr>=2.8.0",
    "joblib>=1.2.0",
]

# Jupyter notebook support
jupyter = [
    "notebook>=6.5.0",
    "jupyterlab>=3.6.0",
    "ipywidgets>=8.0.0",
    "jupyter-contrib-nbextensions>=0.7.0",
]

# Database support
database = [
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.3.0",
    "redis>=4.5.0",
]

# Web API and deployment
api = [
    "fastapi>=0.95.0",
    "uvicorn[standard]>=0.21.0",
    "pydantic>=2.0.0",
    "requests>=2.28.0",
]

# Complete installation with all features
all = [
    "lorentzian-trading-core[plotting,data,performance,jupyter,database,api]"
]

[project.scripts]
lorentzian-backtest = "lorentzian_trading.cli:main"
lorentzian-optimize = "lorentzian_trading.optimization.cli:main"
lorentzian-server = "lorentzian_trading.api.server:main"

[project.entry-points."lorentzian_trading.plugins"]
# Plugin system for custom features
sample_plugin = "lorentzian_trading.plugins.sample:SamplePlugin"

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["lorentzian_trading*"]
exclude = ["tests*", "docs*", "benchmarks*", "examples*"]

[tool.setuptools.package-data]
lorentzian_trading = [
    "py.typed",
    "data/*.json",
    "data/*.csv",
    "configs/*.yaml",
    "configs/*.toml",
]

[tool.setuptools_scm]
write_to = "lorentzian_trading/_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"

# ============================================================================
# Black Configuration
# ============================================================================
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docs
)/
'''

# ============================================================================
# isort Configuration
# ============================================================================
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lorentzian_trading"]
known_third_party = [
    "numpy", "pandas", "scipy", "sklearn", "talib", "plotly", 
    "matplotlib", "seaborn", "yfinance", "tqdm"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# ============================================================================
# MyPy Configuration
# ============================================================================
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "talib.*",
    "yfinance.*", 
    "plotly.*",
    "scipy.*",
    "sklearn.*",
    "numba.*",
]
ignore_missing_imports = true

# ============================================================================
# Pytest Configuration
# ============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=lorentzian_trading",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
    "requires_data: marks tests that require external data",
    "requires_internet: marks tests that require internet connection",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ============================================================================
# Coverage Configuration
# ============================================================================
[tool.coverage.run]
source = ["lorentzian_trading"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/_version.py",
    "*/setup.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ============================================================================
# Bandit Configuration (Security)
# ============================================================================
[tool.bandit]
exclude_dirs = ["tests", "docs", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# ============================================================================
# Ruff Configuration (Alternative to flake8)
# ============================================================================
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.mccabe]
max-complexity = 10

# ============================================================================
# Sphinx Configuration
# ============================================================================
[tool.sphinx]
source-dir = "docs/source"
build-dir = "docs/build"

# ============================================================================
# Pre-commit Configuration Reference
# ============================================================================
# Create .pre-commit-config.yaml with:
# repos:
# - repo: https://github.com/pre-commit/pre-commit-hooks
# - repo: https://github.com/psf/black
# - repo: https://github.com/pycqa/isort
# - repo: https://github.com/pycqa/flake8
# - repo: https://github.com/pre-commit/mirrors-mypy
