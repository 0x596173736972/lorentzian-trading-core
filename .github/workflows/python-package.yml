# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # ============================================================================
  # Code Quality & Security Checks
  # ============================================================================
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install TA-Lib
      run: |
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,docs,plotting]"

    - name: Lint with flake8
      run: |
        flake8 lorentzian_trading/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 lorentzian_trading/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check --diff lorentzian_trading/ tests/

    - name: Type checking with mypy
      run: |
        mypy lorentzian_trading/ --ignore-missing-imports

    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r lorentzian_trading/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report-${{ matrix.python-version }}
        path: bandit-report.json

  # ============================================================================
  # Unit Tests
  # ============================================================================
  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, "3.10", "3.11"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install TA-Lib (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install

    - name: Install TA-Lib (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ta-lib

    - name: Install TA-Lib (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pip install --find-links https://github.com/cgohlke/talib-build/releases/ TA-Lib

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,plotting]"

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=lorentzian_trading --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  # ============================================================================
  # Integration Tests & Backtesting
  # ============================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install TA-Lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,plotting]"

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --timeout=300

    - name: Run backtest validation
      run: |
        python scripts/validate_backtest.py

    - name: Generate performance report
      run: |
        python scripts/generate_report.py

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: reports/

  # ============================================================================
  # Documentation Build
  # ============================================================================
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install TA-Lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs,dev]"

    - name: Build documentation
      run: |
        cd docs/
        make html

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # ============================================================================
  # Performance Benchmarks
  # ============================================================================
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install TA-Lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,plotting]"
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        pytest benchmarks/ --benchmark-json=benchmark-results.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Dependency vulnerability check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-vulnerability-report
        path: safety-report.json

  # ============================================================================
  # Build & Release
  # ============================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, integration, docs]
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # ============================================================================
  # Release to PyPI
  # ============================================================================
  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: pypi
      url: https://pypi.org/p/lorentzian-trading-core

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Test installation from Test PyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ lorentzian-trading-core
        python -c "import lorentzian_trading; print('Package imported successfully')"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  # ============================================================================
  # Notify on Failure
  # ============================================================================
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality, test, integration, docs, security, build, release]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify team on Slack
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#dev-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          🚨 CI/CD Pipeline Failed!
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

# ============================================================================
# Additional workflow files
# ============================================================================

---
# .github/workflows/dependency-update.yml
name: Dependency Update

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install TA-Lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install

    - name: Update dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        pip-compile --upgrade requirements.in
        pip-compile --upgrade requirements-dev.in

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'chore: update dependencies'
        body: |
          This PR updates the project dependencies to their latest versions.
          
          Please review the changes and ensure all tests pass before merging.
        branch: dependency-updates
        delete-branch: true

---
# .github/workflows/codeql.yml
name: CodeQL Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 1 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
